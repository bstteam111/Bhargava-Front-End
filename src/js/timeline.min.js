export default function timeline(elements, options) {
    var timelines = [];

    function validateNumber(value, errorMessage) {
        if (typeof value !== 'number' || value % 1 !== 0) {
            console.warn('Timeline: ' + errorMessage);
            return false;
        }
        return true;
    }

    function insertElementBefore(element, newElement, className) {
        newElement.classList.add(className);
        element.parentNode.insertBefore(newElement, element);
        newElement.appendChild(element);
    }

    function isVisible(element) {
        var rect = element.getBoundingClientRect();
        return rect.top >= 0 &&
            rect.left >= 0 &&
            rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
            rect.right <= (window.innerWidth || document.documentElement.clientWidth);
    }

    function moveScroller(timeline) {
        var transformValue = 'translate3d(-' + timeline.items[timeline.currentIndex].offsetLeft + 'px, 0, 0)';
        timeline.scroller.style.webkitTransform = transformValue;
        timeline.scroller.style.msTransform = transformValue;
        timeline.scroller.style.transform = transformValue;
    }

    function createNavButtons(timeline) {
        if (timeline.items.length > timeline.visibleItems) {
            var prevButton = document.createElement('button');
            var nextButton = document.createElement('button');
            prevButton.className = 'timeline-nav-button timeline-nav-button--prev';
            nextButton.className = 'timeline-nav-button timeline-nav-button--next';
            prevButton.textContent = 'Previous';
            nextButton.textContent = 'Next';
            prevButton.style.top = timeline.items[0].offsetHeight + 'px';
            nextButton.style.top = timeline.items[0].offsetHeight + 'px';
            if (timeline.currentIndex === 0) {
                prevButton.disabled = true;
            } else if (timeline.currentIndex === timeline.items.length - 1) {
                nextButton.disabled = true;
            }
            timeline.timelineEl.appendChild(prevButton);
            timeline.timelineEl.appendChild(nextButton);
        }
    }

    function createTimelineDivider(timeline) {
        if (timeline.timelineEl.querySelector('.timeline-divider')) {
            timeline.timelineEl.querySelector('.timeline-divider').remove();
        }
        var offsetHeight = timeline.items[0].offsetHeight;
        var divider = document.createElement('span');
        divider.className = 'timeline-divider';
        divider.style.top = offsetHeight + 'px';
        timeline.timelineEl.appendChild(divider);
    }

    function initializeTimelines() {
        timelines.forEach(function (timeline) {
            timeline.timelineEl.style.opacity = 0;
            if (!timeline.timelineEl.classList.contains('timeline--loaded')) {
                timeline.items.forEach(function (item) {
                    insertElementBefore(item.querySelector('.timeline__content'), document.createElement('div'), 'timeline__content__wrap');
                    insertElementBefore(item.querySelector('.timeline__content__wrap'), document.createElement('div'), 'timeline__item__inner');
                });

                resetTimelineStyles(timeline);

                if (window.innerWidth <= timeline.forceVerticalMode) {
                    timeline.timelineEl.classList.add('timeline--mobile');
                }

                if (timeline.mode === 'horizontal' && window.innerWidth > timeline.forceVerticalMode) {
                    setupHorizontalTimeline(timeline);
                } else {
                    setupVerticalTimeline(timeline);
                }

                timeline.timelineEl.classList.add('timeline--loaded');
                setTimeout(function () {
                    timeline.timelineEl.style.opacity = 1;
                }, 500);
            }
        });
    }

    function setupHorizontalTimeline(timeline) {
        timeline.timelineEl.classList.add('timeline--horizontal');
        if (window.innerWidth > timeline.forceVerticalMode) {
            timeline.itemWidth = timeline.wrap.offsetWidth / timeline.visibleItems;
            timeline.items.forEach(function (item) {
                item.style.width = timeline.itemWidth + 'px';
            });
            timeline.scrollerWidth = timeline.itemWidth * timeline.items.length;
            timeline.scroller.style.width = timeline.scrollerWidth + 'px';
            var maxHeightOdd = 0;
            var maxHeightEven = 0;
            timeline.items.forEach(function (item, index) {
                var itemHeight = item.offsetHeight;
                if (index % 2 === 0) {
                    maxHeightOdd = maxHeightOdd < itemHeight ? itemHeight : maxHeightOdd;
                } else {
                    maxHeightEven = maxHeightEven < itemHeight ? itemHeight : maxHeightEven;
                }
            });
            timeline.items.forEach(function (item, index) {
                if (index % 2 === 0) {
                    item.style.height = maxHeightOdd + 'px';
                } else {
                    item.style.height = maxHeightEven + 'px';
                    item.style.transform = 'translateY(' + maxHeightOdd + 'px)';
                }
            });
            timeline.scroller.style.height = maxHeightOdd + maxHeightEven + 'px';
        }
        moveScroller(timeline);
        createNavButtons(timeline);
        createTimelineDivider(timeline);
        addNavButtonListeners(timeline);
    }

    function setupVerticalTimeline(timeline) {
        var lastVisibleItemIndex = 0;
        timeline.items.forEach(function (item, index) {
            item.classList.remove('animated', 'fadeIn');
            if (!isVisible(item) && index > 0) {
                item.classList.add('animated');
            } else {
                lastVisibleItemIndex = index;
            }
            var isRightAligned = (timeline.verticalStartPosition === 'left' && index % 2 === 1) ||
                (timeline.verticalStartPosition === 'right' && index % 2 === 0);
            if (isRightAligned && window.innerWidth > timeline.forceVerticalMode) {
                item.classList.add('timeline__item--right');
            } else {
                item.classList.add('timeline__item--left');
            }
        });
        for (var i = 0; i < lastVisibleItemIndex; i++) {
            timeline.items[i].classList.remove('animated', 'fadeIn');
        }
        window.addEventListener('scroll', function () {
            timeline.items.forEach(function (item) {
                if (isVisible(item)) {
                    item.classList.add('fadeIn');
                }
            });
        });
    }

    function resetTimelineStyles(timeline) {
        timeline.currentIndex = 0;
        timeline.timelineEl.classList.remove('timeline--horizontal', 'timeline--mobile');
        timeline.scroller.removeAttribute('style');
        timeline.items.forEach(function (item) {
            item.removeAttribute('style');
            item.classList.remove('animated', 'fadeIn', 'timeline__item--left', 'timeline__item--right');
        });
        var navButtons = timeline.timelineEl.querySelectorAll('.timeline-nav-button');
        navButtons.forEach(function (button) {
            button.parentNode.removeChild(button);
        });
    }

    function addNavButtonListeners(timeline) {
        var navButtons = timeline.timelineEl.querySelectorAll('.timeline-nav-button');
        var prevButton = timeline.timelineEl.querySelector('.timeline-nav-button--prev');
        var nextButton = timeline.timelineEl.querySelector('.timeline-nav-button--next');
        var lastIndex = timeline.items.length - 1;
        navButtons.forEach(function (button) {
            button.addEventListener('click', function (event) {
                event.preventDefault();
                if (this.classList.contains('timeline-nav-button--next')) {
                    timeline.currentIndex = Math.min(timeline.currentIndex + 1, lastIndex);
                } else {
                    timeline.currentIndex = Math.max(timeline.currentIndex - 1, 0);
                }
                prevButton.disabled = (timeline.currentIndex === 0);
                nextButton.disabled = (timeline.currentIndex === lastIndex);
                moveScroller(timeline);
            });
        });
    }

    if (elements.length) {
        elements.forEach(function (element) {
            var mode = (element.dataset.mode || options.mode || 'vertical').toLowerCase();
            var verticalStartPosition = (element.dataset.verticalStartPosition || options.verticalStartPosition || 'left').toLowerCase();
            var forceVerticalMode = parseInt(element.dataset.forceVerticalMode || options.forceVerticalMode || 600, 10);
            var visibleItems = parseInt(element.dataset.visibleItems || options.visibleItems || 3, 10);
            var timelineWrap, timelineItems;
            try {
                timelineWrap = element.querySelector('.timeline__wrap');
                timelineItems = timelineWrap.querySelector('.timeline__items').children;
            } catch (error) {
                console.warn('Timeline: ' + error.message);
                return false;
            }
            timelines.push({
                timelineEl: element,
                wrap: timelineWrap,
                scroller: timelineWrap.querySelector('.timeline__items'),
                mode: (mode === 'horizontal') ? 'horizontal' : 'vertical',
                verticalStartPosition: (verticalStartPosition === 'left') ? 'left' : 'right',
                items: Array.from(timelineItems),
                currentIndex: 0,
                visibleItems: visibleItems,
                forceVerticalMode: validateNumber(forceVerticalMode, "'forceVerticalMode'") ? forceVerticalMode : 600
            });
        });

        initializeTimelines();
        var resizeTimer;
        window.addEventListener('resize', function () {
            clearTimeout(resizeTimer);
            resizeTimer = setTimeout(initializeTimelines, 250);
        });
    }

    window.jQuery && (window.jQuery.fn.timeline = function (options) {
        timeline(this, options);
        return this;
    });
}
